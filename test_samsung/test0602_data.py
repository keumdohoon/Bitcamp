import numpy as np
import pandas as pd


#삼성주가 파일을 불러온다.
hite = pd.read_csv("./data/csv/하이트 주가.csv", 
                        index_col = 0, 
                        header = 0,
                        encoding = 'cp949',
                        sep =',')
                          ##############################################################################
                          #0행이 헤더이다, 0열이 인덱스이니까 너는 그렇게 알아라라고 컴퓨터한테 통보해주는것.##
                          #만약 헤더가 한개가 아닌 두줄이면 header에 1이라고 적어주면-######################
                          #-된다 왜냐하면 인덱스 번호가 1까지 인거니까 1까지가 헤더로 인식되어버린다.########
                          ##############################################################################


samsung = pd.read_csv("./data/csv/삼성전자 주가.csv", 
                        index_col = 0, 
                        header = 0,
                        encoding = 'cp949',
                        sep =',')

                          #################################################################################################
                          #숫자 사이사이에 있는 , 로 되어 있는 경우가 있고 ; 이렇게 적혀 있는 경우가 있는데 여기서는 , 가 있으면=#
                          #숫자 사이의 간격을 띄어주라는 것이다. #############################################################
                          #################################################################################################



print(samsung)
print(hite.head())
#print(samsung.shape)
#print(hite_shape)


#########################
######Non 제거 1#########
#########################
samsung = samsung.dropna(axis=0)
print(samsung)
print(samsung.shape)#(508, 5)
 #삼성은 행이 509개 있는 1개짜리의 데이터다, axis 에 인덱스 0번째에 non이 나온 행들을 다 지워주는 것이다.
 # 그 자리에 데이터가 없으면 non이다. 


hite = hite.fillna(method='bfill')
hite = hite.dropna(axis=0)
 # #bfill 은 데이터의 기존의 데이터들로 앞으로의 데이터들을(non)이 들어있는 데이터들을 채워주는 것이다. 전의 값을 가져와서 비어있는 셀에 집어 넣어 준다는 것이다.
 # 그냥    fillna(method=ffill):forward fill로하면 최신의 데이터들로 예전 데이터들을 채워주게 되는것이다. 
 # 이 모델 같은경우에는 6월2일의데어는 그 후에 데이터가 없으니까 채워지지 않는다. 그래서 bfill을 사용하여 기존의 데이터로 앞으로의 데이터를 채워주는 방식으로 해줘야한다.
 #본인들이 판단하에 전 데이터를 넣던지 0을 넣던지를 결정해준다.
 #하이트 데이터에 있는  non을 dropna를 통해서 정보다 없는 행들은 지워준다. 하지만 Dropna를 사용하면 정보가 들어있는 6월2일의 데이터가 없어지게 되니 그부분을 조심해야한다.   

print(hite.shape)


# #########################
# ######Non 제거 2#########
# #########################
# hite = hite[0:509] #판다스에서는 바로 슬라이싱을 해주게 된다면 이렇게 쓰면 에러 날 가능성이 높다. 
# hite.iloc[0,1:5] = [10, 20, 30, 40]
 # #iloc는 0행의 1~5컬럼에 각각 10, 20, 30,40 을 적용시켜준다는 것이다. 
 #iloc=indexlocation, i는 몇행몇열의 숫자로 가고있는지..
 # 여기서는 0번째 행의 1~5인덱스의 비어있는 것들을 10,20,30,40으로 채워진다. 
 # iloc는 숫자 기반으로 해주는 것이다.  
 #그외의 방법
 #non값을 기존의 데이터에 비교해서 넣고 싶다면 그 전데이터들을 가지고 non은 predict를 잡아주고 있는데이터로
 #-train 과 test로 분리해주고 그 결과값으로 예측치로 넣어주며 non을 채워준다. 

# hite.loc["2020-06-02", '고가':'거래량']= ['10', '20', '30', '40']
 # #행은 날짜를 서주고 열은 고가부터 거래량까지의 데이터슷 쓴다는 것이다. 
 #여기서 햇갈릴수 있는게 거래량이 괄호안에 있는 문자이기에 고가부터 거래량까지 전체를 다 프린트해준다. 
 # #고가부터 거래량까지 가각의 항목에 10, 20, 30, 40을 각각 자리에 넣어준다. 
 #loc는 문자기반으로 찾아주는것
print(hite)

# 삼성과 하이트의 정렬을 오름차순 으로 변경
samsung = samsung.sort_values(['일자'], ascending=[True])
hite = hite.sort_values(['일자'], ascending=[True])

print(samsung)
print(hite)


#콤마제거, 문자를 정수로 형변환
#콤마제거하기전에 타입을 str 해주면 오류 안뜬다.
for i in range(len(samsung.index)):    #'37,000' ->37000
    samsung.iloc[i, 0] = int(samsung.iloc[i,0].replace(',',''))
print(samsung)
print(type(samsung.iloc[0,0]))  #클래스 int
#얘는 행마다 한번만 돌리면 되서 i,0 인데
#hite 거는 2번 따로 행과 열을 계간해줘야한다 모든행에 있는 5개의 열을 계산해준다는 말임

for i in range(len(hite.index)):
    for j in range(len(hite.iloc[i])):
        hite.iloc[i,j] = int(hite.iloc[i,j].replace(',',''))
         #두번 돌려 줘야하는 이유는 열이 여러개여서 그렇가 위에 삼성은 열이 하나였는데 얘는 여섯 번이니까 
         #i(행)만큼 계산해주고 그거를 또 j(열,5번 계산) 만큼 또 계산해준다. 

print(samsung.shape)
print(hite.shape)



samsung = samsung.values
hite = hite.values


np.save('./data/samsung.npy', arr=samsung)
np.save('./data/hite.npy', arr=hite)
'''